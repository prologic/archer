syntax = "proto3";
package v1;
option go_package = "api/v1";

import "google/protobuf/timestamp.proto";
//import "api/proto/v1/schemes.proto";

// Archer manages sample processing prior to
// running CLIMB pipelines.
//
// This includes read qc, contamination filtering,
// compression and endpoint upload.
service Archer {

    // Process will begin processing for a sample.
    rpc Process(ProcessRequest) returns (ProcessResponse) {};

    // Cancel will cancel processing for a sample.
    rpc Cancel (CancelRequest) returns (CancelResponse) {};

    // GetInfo returns information on one or more preparation operations.
    //rpc GetInfo(GetInfoRequest) returns (stream GetInfoResponse) {};

    // Watch sample processing, returning messages when sample processing starts, stops or updates
    // The current state of all currently-processing samples will be returned in the initial set
    // of messages, with the option of also including finished samples.
    rpc Watch (WatchRequest) returns (stream WatchResponse) {};

}

// State of a sample being handled by Archer.
enum State {

    // sample is queued
    UNKNOWN = 0;

    // sample prep is running
    RUNNING = 1;

    // sample prep is complete with no errors
    SUCCESS = 2;

    // sample prep has stopped due to errors
    ERROR = 3;

    // sample prep was cancelled via a call to cancel()
    CANCELLED = 4;
}

// SampleStats stores basic numbers from the
// sample processing.
message SampleStats {

    // total reads across all FASTQs for a sample
    int32 totalReads = 1;

    // kept reads across all FASTQs for a sample
    int32 keptReads = 2;

    // ampliconCoverage counts the numer of reads assigned to each amplicon for a sample
    map<string, int32> ampliconCoverage = 3;

    // meanAmpliconSize is the mean size of the reference amplicons (incl. primers)
    int32 meanAmpliconSize = 4;

    // lengthMax is the maximum length allowed for a read to be kept.
    int32 lengthMax = 5;

    // minLength is the minimum length allowed for a read to be kept.
    int32 lengthMin = 6;
}

// SampleInfo describes how a sample was
// processed by Archer.
message SampleInfo {

    // sampleID is the sample identifier - as returned by Process()
    string sampleID = 1;

    // the original message used to start the sample processing
    ProcessRequest processRequest = 2;

    // state the sample is in
    State state = 3;

    // errors will contain encountered errors (if state is STATE_ERROR, otherwise this will be empty)
    repeated string errors = 4;

    // filesDiscovered is the number of files found for this sample
    int32 filesDiscovered = 5;

    // startTime for processing
    google.protobuf.Timestamp startTime = 6;

    // endTime for processing (unset if processing still running)
    google.protobuf.Timestamp endTime = 7;

    // processStats contains details on the processing request output
    SampleStats processStats = 8;

    // endpoint is the AWS S3 location for the processed sample
    string endpoint = 9;

}

// ProcessRequest will request a sample to be processed by Archer.
message ProcessRequest {

    // api version
    string apiVersion = 1;

    // sampleID is the sample identifier - users job to assign this and make it unique
    string sampleID = 2;

    // inputFASTQfiles for this sample
    repeated string inputFASTQfiles = 3;

    // scheme denotes the amplicon scheme used for the sample
    string scheme = 4;

    // schemeVersion denotes the amplicon scheme version used
    int32 schemeVersion  = 5;
}

// ProcessResponse
message ProcessResponse {

    // api version
    string apiVersion = 1;

    // identifier for the sample that processing was started for (used to monitor or cancel the sample)
    string id = 2;
}

// CancelRequest will cancel processing for a sample.
message CancelRequest {

    // api version
    string apiVersion = 1;

    // identifier for the sample
    string id = 2;
}

// CancelResponse.
message CancelResponse {};

// WatchRequest to monitor sample processing.
message WatchRequest{

    // api version
    string apiVersion = 1;

    // sendFinished will tell Archer to also send information on samples that have completed procesing
    bool sendFinished = 2;
}

// WatchResponse.
message WatchResponse{

    // api version
    string apiVersion = 1;

    // current state of samples
    repeated SampleInfo samples = 2;
}