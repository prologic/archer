// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/will-rowe/archer/pkg/api/v1 (interfaces: ArcherClient)

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/will-rowe/archer/pkg/api/v1"
	grpc "google.golang.org/grpc"
)

// MockArcherClient is a mock of ArcherClient interface.
type MockArcherClient struct {
	ctrl     *gomock.Controller
	recorder *MockArcherClientMockRecorder
}

// MockArcherClientMockRecorder is the mock recorder for MockArcherClient.
type MockArcherClientMockRecorder struct {
	mock *MockArcherClient
}

// NewMockArcherClient creates a new mock instance.
func NewMockArcherClient(ctrl *gomock.Controller) *MockArcherClient {
	mock := &MockArcherClient{ctrl: ctrl}
	mock.recorder = &MockArcherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArcherClient) EXPECT() *MockArcherClientMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockArcherClient) Cancel(arg0 context.Context, arg1 *v1.CancelRequest, arg2 ...grpc.CallOption) (*v1.CancelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Cancel", varargs...)
	ret0, _ := ret[0].(*v1.CancelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel.
func (mr *MockArcherClientMockRecorder) Cancel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockArcherClient)(nil).Cancel), varargs...)
}

// Process mocks base method.
func (m *MockArcherClient) Process(arg0 context.Context, arg1 *v1.ProcessRequest, arg2 ...grpc.CallOption) (*v1.ProcessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Process", varargs...)
	ret0, _ := ret[0].(*v1.ProcessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockArcherClientMockRecorder) Process(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockArcherClient)(nil).Process), varargs...)
}

// Watch mocks base method.
func (m *MockArcherClient) Watch(arg0 context.Context, arg1 *v1.WatchRequest, arg2 ...grpc.CallOption) (v1.Archer_WatchClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(v1.Archer_WatchClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockArcherClientMockRecorder) Watch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockArcherClient)(nil).Watch), varargs...)
}
